version: "3.9"

services:
  frontend:
    image: frontend
    build:
      # context definuje cestu k popisu
      context: ./frontend
    environment:
      # promenne, ktere lze cist v kontejneru
      - GQL_PROXY=http://apollo:3000/api/gql/
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu)
      test: "curl -f -X GET http://localhost:8000/ui/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

  apollo:
    image: apollo
    build:
      # context definuje cestu k popisu
      context: ./apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      - gql_externalids
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:3000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    # ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
    #   - 31121:3000

  gql_externalids:
    image: gql_externalids
    build:
      # context definuje cestu k popisu
      context: ./gql_externalids
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - POSTGRES_HOST=postgres:5432
      - DEMO=true
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      postgres:
        condition: service_started

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    # ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
    #   - 31125:8000

  postgres:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports:
      - 5432:5432

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      # promenne, ktere lze cist v kontejneru
      - PGADMIN_DEFAULT_EMAIL=anoyne@anywhere.com
      - PGADMIN_DEFAULT_PASSWORD=example
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - 31122:80

  nginx: # funguje jako proxy mezi vnejskem a vnitrkem, tudy tece cela HTTP komunikace
    build:
      # context definuje cestu k popisu
      context: ./nginx
    restart: always
    ports:
      # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31180:80
    depends_on:
      # kontejnery, kter musi byt spusteny drive
      - postgres
      - apollo

  redis:
    image: redis/redis-stack:6.2.4-v4
    ports:
      - 31188:8001
